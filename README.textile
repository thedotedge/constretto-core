h1. Constretto

Constretto is as configuration management framework for Java applications. 
It allows you to "tag" configuration values, so that Constretto could choose the correct value at runtime. 

It also works as a bridge between different configuration formats, and currently Java property files, Ini files, and Java Beans are
supported.

h2. How to Install?

Constretto is built with maven, so if you are using maven, you can simply add Constretto as dependencies in your pom:

<pre>
	<dependencies>
		...
		<dependency>
			<groupId>org.constretto</groupId>
			<artifactId>constretto-api</artifactId>
			<version>1.1</version>
		</dependency>
		<dependency>
			<groupId>org.constretto</groupId>
			<artifactId>constretto-core</artifactId>
			<version>1.1</version>
			<scope>runtime</scope>
		</dependency>
		...
	</dependencies>
</pre>

If you would like to use the Spring support add:

<pre>
	<dependency>
		<groupId>org.constretto</groupId>
		<artifactId>constretto-spring</artifactId>
		<version>1.1</version>
	</dependency>
</pre>


If you would like to use the Constretto Junit support with junit 4.4 (spring 2.5.x) add:

<pre>
	<dependency>
		<groupId>org.constretto</groupId>
		<artifactId>constretto-test</artifactId>
		<version>1.1</version>
		<scope>test</scope>
	</dependency>
</pre>

If you would like to use the Constretto Junit support with junit 4.5 (spring 3.x) add:

<pre>
	<dependency>
		<groupId>org.constretto</groupId>
		<artifactId>constretto-test-junit-4.5</artifactId>
		<version>1.1</version>
		<scope>test</scope>
	</dependency>
</pre>


These artifacts are currently not published to the main maven repository, so in order to download them add the following repository definition in your pom:

<pre>
	<repositories>
	    <repository>
	      <id>constretto.org</id>
	      <name>Constretto public maven repository</name>
	      <url>http://repo.constretto.org/content/repositories/releases</url>
	    </repository>
	</repositories>		
</pre>	

h2. How to configure Constretto?

h3. Using Java API

Constretto provides a fluent API to be used in any Java application. Its main interface is ConstrettoConfiguration, that supplies methods to query for values in your configuration.
To initialize the ConstrettoConfiguration interface, use the supplied ConstrettoBuilder as shown in the example below:

<pre>
	ConstrettoConfiguration config = 
	                new ConstrettoBuilder()
	                        .createPropertiesStore()
	                            .addResource(new DefaultResourceLoader().getResource("classpath:test.properties"))
	                            .addResource(new DefaultResourceLoader().getResource("file:test2.properties"))
	                        .done()
	                        .createIniFileConfigurationStore()
	                            .addResource(new DefaultResourceLoader().getResource("classpath:test.ini"))
	                        .done()
	                        .createObjectConfigurationStore()
	                            .addObject(new Object())
	                        .done()
	                        .createSystemPropertiesStore()
	                        .getConfiguration();
</pre>

h3. Using Spring framework

Constretto works very well in a Spring environment, It provides a namespace for Spring xml configuration files, to build a ConstrettoConfiguration object,
 and also provides a ProperyPlaceHolder to allow values in Spring xml files to be resolved from Constretto, and also a BeanPostProcessor that 
enables ConfigurationInjection.

To tell spring to use Constretto:

<pre>
	<beans xmlns="http://www.springframework.org/schema/beans"
	       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	       xmlns:constretto="http://constretto.org/schema/constretto"
	       xsi:schemaLocation="http://www.springframework.org/schema/beans
	           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
	           http://constretto.org/schema/constretto
	           http://constretto.org/schema/constretto/constretto-1.2.xsd">

	    <constretto:configuration annotation-config="true" property-placeholder="true">
	        <constretto:stores>
	            <constretto:properties-store>
	                <constretto:resource location="classpath:properties/test1.properties"/>
	            </constretto:properties-store>
	        </constretto:stores>
	    </constretto:configuration>
	</beans>
</pre>

h2. How to use Constretto in your application?

h3. Using Java API

Now that you've configured Constretto, by Java API or Spring, you may query your configuration using the methods in the ConstrettoConfiguration interface like in the examples below:

<pre>
	// Simple lookup
	String aDataSourceUrl = configuration.evaluateToString("datasources.customer.url");
	
	// Cursored lookup
	ConstrettoConfiguration cursoredConfiguration = configuration.at("datasources").at("customer");
	String sameDataSourceUrl = cursoredConfiguration.evaluateToString("url");
	
</pre>

h3. Configuration Injection - Annotation Based

In much the same way as dependency injection work in e.g. Spring and Guice, Constretto allows you to inject configuration into your classes.
It supports injection in fields, and methods as seen in the example below:

Java class to be injected with configuration:

<pre>
	public class DataSourceConfiguration {

	    private String myUrl;
	    private String myPassword;
	    private Integer version;

		// When no expression is explicitly given Constretto will use field name as key
	    @Configuration
	    private String vendor;

	    @Configuration(expression = "username")
	    private String myUsername;

		// Considered best practice. Field injections will reduce your ability to test code. 
	    @Configure
	    public void configure(String url, @Configuration(expression = "password") String secret) {
	        this.myUrl = url;
	        this.myPassword = secret;
	    }

	    @Configure
	    public void setVersion(Integer version) {
	        this.version = version;
	    }

	    public String getUrl() {
	        return myUrl;
	    }

	    public String getUsername() {
	        return myUsername;
	    }

	    public String getPassword() {
	        return myPassword;
	    }

	    public String getVendor() {
	        return vendor;
	    }

	    public Integer getVersion() {
	        return version;
	    }
	}
</pre>

A test that shows this feature used with the Java API:

<pre>
	public class ConfigurationAnnotationsTest {
	    private ConstrettoConfiguration configuration;

	    @Before
	    public void prepareTests() {
	        setProperty("datasources.customer.url", "jdbc://url");
	        setProperty("datasources.customer.username", "username");
	        setProperty("datasources.customer.password", "password");
	        setProperty("datasources.customer.vendor", "derby");
	        setProperty("datasources.vendor", "derby");
	        setProperty("datasources.customer.version", "10");

	        configuration = new ConstrettoBuilder().createSystemPropertiesStore().getConfiguration();

	    }

	    @Test
	    public void createNewAnnotatedConfigurationObject() {
	        DataSourceConfiguration customerDataSource = configuration.at("datasources").from("customer").as(DataSourceConfiguration.class);
	        assertEquals("jdbc://url", customerDataSource.getUrl());
	        assertEquals("username", customerDataSource.getUsername());
	        assertEquals("password", customerDataSource.getPassword());
	        assertEquals("derby", customerDataSource.getVendor());
	        assertEquals(new Integer(10), customerDataSource.getVersion());
	    }

	    @Test
	    public void applyConfigrationToAnnotatedConfigurationObject() {
	        DataSourceConfiguration customerDataSource = new DataSourceConfiguration();
	        configuration.at("datasources").from("customer").on(customerDataSource);
	        assertEquals("derby", customerDataSource.getVendor());
	        assertEquals("username", customerDataSource.getUsername());
	        assertEquals("jdbc://url", customerDataSource.getUrl());
	        assertEquals("password", customerDataSource.getPassword());
	        assertEquals(new Integer(10), customerDataSource.getVersion());
	    }
	}
</pre>

h2. Configuration Formats.

Constretto currently supports four Configuration sources, and the following sections shows how these are used, and how you may tag 
your configuration values.

h3. Java Property Files

When using Java Property files, you may tag your entry with "@[tag]." if a key does not have a tag, it will be considered a default, and always be available

Example:

<pre>
	somedb.username=default username
	@production.somedb.username=username in production
	@systest.somedb.username=username in system test
</pre>

h3. Ini Files

Constretto also supports Ini files and here, sections are used as tags

Example:

<pre>
	[default]
	somedb.username=default username

	[production]
	somedb.username=username in production

	[systest]
	somedb.username=username in system test
</pre>

h3. Java Objects used as configuration sources

Constretto are able to use Java objects as configuration sources, and then annotations are used to indicate which tags are used.
Also the ConfigurationSource annotation can use an optional basePath attribute, that are prepended to the JavaBean property names found in the class resulting in "somedb.username" in the example below.

Example:

<pre>
	@ConfigurationSource(basePath = "somedb")
	public class DefaultDataSourceConfigurer {

	    public String getUsername() {
	        return "default username;
	    }
	}
	
	@ConfigurationSource(basePath = "somedb", tag = "production")
	public class ProductionDataSourceConfigurer {

	    public String getUsername() {
	        return "username in production";
	    }
	}
</pre>

h3. System properties

Constretto also allows values to be retrieved from System properties, but here tags are not supported. 

h2. How to tell Constretto what tags to look up?

Constretto uses a System property, or System environment property to know what tags to look up.  this property is called "CONSTRETTO_TAGS"

Example:

<pre>
	$java MyApp -DCONSTRETTO_TAGS=tag1,tag2,tag3
</pre>
Or
<pre>
	$export CONSTRETTO_TAGS=tag1,tag2,tag3
	$java Myapp
</pre>

h2. How to report errors or request features?

Please go to "http://constretto.lighthouseapp.com/":http://constretto.lighthouseapp.com/

h2. For further information and documentation

Constretto has several more nice features, and they are covered in the reference manual at the Constretto official website: "http://constretto.org":http://constretto.org


h2. New section